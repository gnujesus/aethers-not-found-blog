[{"content":"Welcome Welcome to the first post of my blog, aethers-vi, in which I will talk about the different complaints and problems I\u0026rsquo;ve been having working with Hugo along with GitHub Pages for the past 3 days, as well as explain some of the solutions I found useful for the problem I was having. I\u0026rsquo;ll tell you in advance, it\u0026rsquo;s been hell.\nProblems Lack of documentation Since the start of my journey trying to start this blog and post for the world for the first time, I\u0026rsquo;ve been struggling with the fact that paying for a server is too expensive for a blog which will be managed by one person only, So I went to explore other alternatives that could offer me something more accessible. That\u0026rsquo;s how I learned about static websites generators.\nI came across many static website generators, including Next.js, Jekyll and Hugo, the last one being the one I\u0026rsquo;m to make this blog right now.\nSince Hugo seemed interesting and looked like a tool which wasn\u0026rsquo;t going to be that much of a trouble to deploy a website and start working on my blog and my social media presence, I decided to give it a shot which lasted three entire days of sorrow and suffering.\nAfter installing Hugo on my laptop, I followed the steps to create a new site, create a new post, push it to a GitHub repo and host it using GitHub Pages. This is where hell starts.\nWhen the site was deployed, it was supposed to load the content and the theme correctly, which means the HTML and CSS of the time. What an unpleasant surprise for me that only the HTML was loading on the site.\nAfter seeing this, I decided to do what every software developer would do in a situation like this: Google. I\u0026rsquo;m lying, I first tried to troobleshoot it myself and then googled it.\nAfter searching through Google for an hour and trying every single solution here was, I started to get desperate. I even tried looking up different tutorials that tried different approaches to hosting a Hugo site on GitHub Pages. This didn\u0026rsquo;t work at all, since it was working for everyone and not for me. I started to even think that there had to be a problem with the version of Hugo I had installed, or with the blog.\nUnprecise Visual Material The tutorials I found on YouTube about the topic didn\u0026rsquo;t help much either. Most of them followed the same steps to get to the same result at the end, without touching the different problems that one may have trying to follow along. I have to admit that some of the videos did things differently, which helped me understand many things. But, even though my knowledge developed, I was still in the exact same place with no progress regarding my blog.\nDiscoveries Reading half of the posts about the problem I\u0026rsquo;m having helped me learn some things. The main reason this problems happens is because of the index.html is not able to find the directory in which the styles are located. This happens because in the config.yml file (or tml, which ever you prefer) the baseURL isn\u0026rsquo;t set correctly. The baseURL is supposed to be the URL of the site, in which the site will search for the favicon, images, and most importantly, styles. The three main solutions I found for this problems were the following:\nChanging the baseURL to /: This is supposed to fix the problem since you\u0026rsquo;re setting the baseURL to be a relative URL, that way, when the page searches for assets, instead of going \u0026lt;URL\u0026gt;/.../assets/ it will go /assets/. Changing the baseURL to https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;name_of_the_site\u0026gt;/: This uses github as the root directory for the assets, so the website goes there when it needs to find the styles and any other element needed for the site. Neither of this solutions worked for me. I tried setting the end of the baseURL to a /, I tried deleting that, I tried leaving it blank, I tried setting to a relative directory, and even enable the relativeDirectory and uglyURLs parameter on the config.yml file to see if that was the problem, and nothing seemed to work.\nSolution After trying almost everything at hand, I came across a page called Netlify. This page offers a free hosting service with some limitations for people and teams to host their websites there.\nAt the beginning, I was skeptical with the idea of using this service, but then I gave it a try. The firs time I tried, it worked perfectly but the home button of the page wasn\u0026rsquo;t working as expected, so I went back to the GitHub Pages to keep trying since I though it was supossed to work well there.\nAfter losing my patience once again, I came back to Netlify after deploying everything on GitHub and hosted it there, and figure out that for the home button to work, I had to set the baseURL to / once again so the site searches for the relative directory of each thing on order to work correctly.\nThen, after deploying on Netlify, I had a beautiful website fully working with no issues.\n","permalink":"/posts/complaints-on-hugo/","summary":"Welcome Welcome to the first post of my blog, aethers-vi, in which I will talk about the different complaints and problems I\u0026rsquo;ve been having working with Hugo along with GitHub Pages for the past 3 days, as well as explain some of the solutions I found useful for the problem I was having. I\u0026rsquo;ll tell you in advance, it\u0026rsquo;s been hell.\nProblems Lack of documentation Since the start of my journey trying to start this blog and post for the world for the first time, I\u0026rsquo;ve been struggling with the fact that paying for a server is too expensive for a blog which will be managed by one person only, So I went to explore other alternatives that could offer me something more accessible.","title":"Complaints on GitHub Pages"},{"content":"Disclaimer: Vim \u0026gt; Emacs\nIntroduction I first learned about Vim thanks to ThePrimeagen, a software developer and engineer who works at Netflix btw. When I saw Vim in action in the hands of an expert, coding in the exact same language I was learning in that moment but at the speed of light, made me realize that I couldn’t live my life as a developer without learning Vim.\nThe shortcuts, the customization, the feel of control, the power, but overall… the speed. I first spent some days doing my respective research about the topic, but I eventually hopped into it without even noticing.\nWhat is Neovim Is the best editor there is. Jk.\nVim is a modal, free open-source text editor. It was first released for UNIX, and is (as you may guess) the text editor that comes by default with Linux. Neovim is aimed to improve text editing by the usage of keybinding, which gives users a more homerow-centric experience while editing.\nNeovim is actually a fork from which adds functionalities and improves some things about the editor.\nWhy is Neovim better than every other code editor Blazingly Fast Disclaimer: I will be referring to Vim (the program) as Neovim, since that’s what I use and prefer, but will refer to Vim (the keybindings) as Vim.\nNeovim offers a plethora of keybindings which allow programmers to speed up the process of developing a program, as well of a library even bigger of plugins that offer customization settings for improvement in any area of text editing. It’s like Atom: “A hackable code editor”, but this is actually a hackable code editor. RIP Atom btw.\nSay for example that you want to delete a specific number of lines of code because you have to rewrite them for refactoring purposes. In Vscode, you would have to do one of these two things:\nOption 1: Move your hand from your keyboard to your mouse (or mousepad if you’re completely out of your mind), then grab it, select the lines you want to delete, move your hand to your keyboard again and then press either backspace or enter. Option 2: Press Shift, press the up arrow until you have selected all the lines, and then backspace or enter. As you see, this is a process that takes too long to perform using normal keyboard bindings, but Vim keybindings are magic.\nSay the number of lines that are to be deleted is 8. Using Vim, you only have to do the following: Shift-V 8-k-d. That’s what I call blazingly fast.\nWith only knowing what each key does, and what each combination does, the process of deleting some lines has shortened by an eternity. But that’s only a little demonstration of the many cases in which Vim has helped me shorten the process of doing multiple tasks that would’ve taken me forever, like editing code inside a pair of specific brackets.\nLet’s illustrate another example, you’re coding in TypeScript (because we all know JavaScript sucks) and you need to edit the anonymous function on the event listener which is located inside a for loop. That would look like this:\nconst buttons = document.querySelectorAll(\u0026#39;.circle\u0026#39;); for (let i = 0; i \u0026lt; buttons.length; i++){ buttons[i].addEventListener(\u0026#39;click\u0026#39;, function(){ console.log(\u0026#39;Hello World\u0026#39;) } } Here we have two pairs of brackets, let’s say that you want to change the console.log() for a if statement. Using Vscode you would have to grab your mouse again, move into the brackets, select, delete and edit, or use you keyboard arrows which is, honestly, more suffering in this case.\nUsing Vim you only have to place yourself inside or near the brackets using hjkl, and then c i { into those sissy brackets and edit your code. Again, blazingly fast. This combination of keys will place you inside the nearest brackets and delete whatever’s inside of them, and put you on input mode so you can introduce text.\nCustomization Neovim allows it’s users to customize it to the core. After installing it, it comes as a plain text editor without more than basic text editing functions, and commands and combinations of keys that facilitate the code editing process (take into account that I’m not a Vim professional, I may be missing something here).\nIt has a wide community of users who develop and are constantly updating plugins for it’s optimal usage, which allows you to customize it in ways you may have never imagined.\nWide Community Neovim has a wide community of users who offer support for the many features included in Neovim, as well as support for it’s plugins and instructions on how to use these properly to avoid or troubleshoot any mistakes.\nEither it is on GitHub, StackOverflow, Discord, ThePrimeagen’s YouTube channel, Tpope’s twitter, my blog, Google, ChatGPT, you can be sure that you will always find support and instructions about almost anything you can think of about Neovim’s usage.\nWhy you shouldn’t use Neovim if you’re just starting to code I’ll say this straight: setting up Neovim takes time, and learning how to set everything up and understand how things work takes even longer. If you’re just starting to code, I recommend downloading the Vim plugin for your text editor, or enabling the Vim keybinding if your text editor has those included.\nAs a Neovim user, I have to admit that I have gone through heaven and hell trying to create my own configuration for the editor, either trying to set it up or dealing with errors that pop up from nothing while trying to print ‘hello world’ on Brainfuck.\nThe time you spend into setting up Neovim could be used to learn how to really use Vim shortcuts, and this can be done perfectly using Vscode. Even better, the time spent trying to understand how to set up Neovim could be used to actually learn how to code, work on projects and improve your programming ability. I’m not saying you should forget about switching to Neovim as your editor, but it is important that you evaluate what’s urgent and what’s important. I would advice you that if you’re planning on understanding how to configure Neovim and how everything works, take some time to learn the fundamentals of Lua, it will make the process way easier.\nConclusion Vim \u0026gt; Vscode.\n","permalink":"/posts/my-experience-with-vim-neovim-as-a-junior-developer/","summary":"Disclaimer: Vim \u0026gt; Emacs\nIntroduction I first learned about Vim thanks to ThePrimeagen, a software developer and engineer who works at Netflix btw. When I saw Vim in action in the hands of an expert, coding in the exact same language I was learning in that moment but at the speed of light, made me realize that I couldn’t live my life as a developer without learning Vim.\nThe shortcuts, the customization, the feel of control, the power, but overall… the speed.","title":"My experience with Vim (Neovim) as a Junior Developer"}]